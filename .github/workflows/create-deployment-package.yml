name: 📦 Create Deployment Package

on:
  workflow_dispatch: # Manual triggering for deployment packages
    inputs:
      include_vendor:
        description: 'Include vendor directory (larger but complete)'
        required: false
        default: 'true'
        type: boolean

jobs:
  create-package:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐘 Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, json, zip
        tools: composer:v2
        
    - name: 📦 Get Composer Cache Directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
      
    - name: 🗄️ Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-
        
    - name: 🔧 Install Composer dependencies
      run: |
        if [ "${{ github.event.inputs.include_vendor }}" = "true" ]; then
          echo "Installing production dependencies..."
          # Handle potential lock file conflicts with PHP version
          if ! composer install --no-dev --optimize-autoloader --no-interaction --prefer-dist; then
            echo "Lock file conflicts detected, updating dependencies..."
            composer update --no-dev --optimize-autoloader --no-interaction --prefer-dist
          fi
        else
          echo "Skipping vendor directory - you'll need to run 'composer install' on the server"
        fi
        
    - name: 📝 Create production environment file
      run: |
        cp production.env.example .env.production
        echo "# Update these values for your Fasthost setup:" >> .env.production
        echo "APP_KEY=${{ secrets.APP_KEY || 'GENERATE_NEW_KEY' }}" >> .env.production
        echo "DB_DATABASE=your_database_name" >> .env.production
        echo "DB_USERNAME=your_database_username" >> .env.production
        echo "DB_PASSWORD=your_database_password" >> .env.production
        
    - name: 🧹 Clear Laravel caches
      if: github.event.inputs.include_vendor == 'true'
      run: |
        php artisan config:clear || true
        php artisan route:clear || true
        php artisan view:clear || true
        php artisan cache:clear || true
        
    - name: 📦 Create optimized deployment package
      run: |
        # Create deployment directory
        mkdir binday-deployment
        
        # Define exclusions
        EXCLUDE_PATTERNS=""
        EXCLUDE_PATTERNS="$EXCLUDE_PATTERNS --exclude=.git"
        EXCLUDE_PATTERNS="$EXCLUDE_PATTERNS --exclude=node_modules"
        EXCLUDE_PATTERNS="$EXCLUDE_PATTERNS --exclude=tests"
        EXCLUDE_PATTERNS="$EXCLUDE_PATTERNS --exclude=.github"
        EXCLUDE_PATTERNS="$EXCLUDE_PATTERNS --exclude=storage/framework/cache/data"
        EXCLUDE_PATTERNS="$EXCLUDE_PATTERNS --exclude=storage/logs"
        EXCLUDE_PATTERNS="$EXCLUDE_PATTERNS --exclude=deploy_ftp.ps1"
        EXCLUDE_PATTERNS="$EXCLUDE_PATTERNS --exclude=root_index.php"
        EXCLUDE_PATTERNS="$EXCLUDE_PATTERNS --exclude=DEPLOYMENT_GUIDE.md"
        EXCLUDE_PATTERNS="$EXCLUDE_PATTERNS --exclude=DEVELOPMENT_NOTES.md"
        EXCLUDE_PATTERNS="$EXCLUDE_PATTERNS --exclude=production.env.example"
        EXCLUDE_PATTERNS="$EXCLUDE_PATTERNS --exclude=create-deployment-package.ps1"
        EXCLUDE_PATTERNS="$EXCLUDE_PATTERNS --exclude=.env"
        
        # Conditionally exclude vendor if not including it
        if [ "${{ github.event.inputs.include_vendor }}" != "true" ]; then
          EXCLUDE_PATTERNS="$EXCLUDE_PATTERNS --exclude=vendor"
        fi
        
        # Copy files with exclusions
        rsync -av $EXCLUDE_PATTERNS ./ binday-deployment/
        
        # Copy production environment as .env
        cp .env.production binday-deployment/.env
        
        # Ensure required storage directories exist
        mkdir -p binday-deployment/storage/framework/cache/data
        mkdir -p binday-deployment/storage/framework/sessions
        mkdir -p binday-deployment/storage/framework/views
        mkdir -p binday-deployment/storage/logs
        mkdir -p binday-deployment/bootstrap/cache
        
        # Create empty .gitkeep files for empty directories
        touch binday-deployment/storage/framework/cache/data/.gitkeep
        touch binday-deployment/storage/framework/sessions/.gitkeep
        touch binday-deployment/storage/framework/views/.gitkeep
        touch binday-deployment/storage/logs/.gitkeep
        touch binday-deployment/bootstrap/cache/.gitkeep
        
        # Create the deployment zip
        cd binday-deployment
        zip -r ../binday-deployment-$(date +%Y%m%d-%H%M%S).zip .
        cd ..
        
        # Get package info
        PACKAGE_NAME=$(ls binday-deployment-*.zip)
        PACKAGE_SIZE=$(ls -lh $PACKAGE_NAME | awk '{print $5}')
        
        echo "📊 Deployment package created: $PACKAGE_NAME"
        echo "📦 Package size: $PACKAGE_SIZE"
        echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_ENV
        echo "PACKAGE_SIZE=$PACKAGE_SIZE" >> $GITHUB_ENV
        
    - name: 🗂️ Create root index file
      run: |
        cat > root-index.php << 'EOF'
        <?php
        // Front controller for shared hosting: route to subdirectory's public index
        require __DIR__.'/binday/public/index.php';
        EOF
        
    - name: 📤 Upload deployment package as artifact
      uses: actions/upload-artifact@v4
      with:
        name: binday-deployment-package
        path: |
          ${{ env.PACKAGE_NAME }}
          root-index.php
        retention-days: 30
        
    - name: 📋 Create deployment instructions
      run: |
        cat > DEPLOYMENT_INSTRUCTIONS.md << EOF
        # 🚀 BinDay Deployment Package
        
        **Package**: \`${{ env.PACKAGE_NAME }}\`  
        **Size**: ${{ env.PACKAGE_SIZE }}  
        **Created**: $(date)
        **Include Vendor**: ${{ github.event.inputs.include_vendor }}
        
        ## 📤 Fasthost Upload Instructions
        
        ### Method 1: File Manager (Recommended)
        1. Download the deployment package from this GitHub Action
        2. Login to your Fasthost control panel
        3. Go to **File Manager**
        4. Navigate to \`/htdocs/\`
        5. Upload \`${{ env.PACKAGE_NAME }}\`
        6. Extract the zip file
        7. Rename the extracted folder to \`binday\`
        8. Upload \`root-index.php\` as \`/htdocs/index.php\`
        
        ### Method 2: Direct FTP Upload
        Use your FTP client to upload the extracted contents to \`/htdocs/binday/\`
        
        ## ⚙️ Post-Deployment Setup
        
        1. **Update Environment**: Edit \`/htdocs/binday/.env\` with your database credentials
        2. **Set Permissions**: Storage and bootstrap/cache directories need 755 permissions
        3. **Install Dependencies** (if vendor excluded): SSH to server and run \`composer install --no-dev\`
        4. **Test Application**: Visit https://thebinday.co.uk
        
        ## 🗄️ Database Setup
        - This application uses JSON file storage by default
        - Collections: \`storage/app/collections.json\`
        - Areas: \`storage/app/allowed_areas.json\`
        - No database migration required!
        
        ## 🎯 URLs to Test
        - **Home**: https://thebinday.co.uk/
        - **Map**: https://thebinday.co.uk/bins/map
        - **Collections**: https://thebinday.co.uk/collections
        - **Areas**: https://thebinday.co.uk/areas
        - **Seeding**: https://thebinday.co.uk/admin/seed
        
        **Estimated deployment time: 5-10 minutes**
        EOF
        
    - name: 📤 Upload deployment instructions
      uses: actions/upload-artifact@v4
      with:
        name: deployment-instructions
        path: DEPLOYMENT_INSTRUCTIONS.md
        retention-days: 30
        
    - name: ✅ Summary
      run: |
        echo "🎉 Deployment package created successfully!"
        echo ""
        echo "📦 Package: ${{ env.PACKAGE_NAME }}"
        echo "📊 Size: ${{ env.PACKAGE_SIZE }}"
        echo "🔗 Download from: Actions → Artifacts"
        echo ""
        echo "Next steps:"
        echo "1. Download the deployment package from GitHub Actions artifacts"
        echo "2. Upload to Fasthost via File Manager"
        echo "3. Follow the deployment instructions"
