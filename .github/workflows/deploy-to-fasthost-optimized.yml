name: 🚀 Deploy to Fasthost (Optimized)

on:
  workflow_dispatch: # Manual triggering only for production deployments

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐘 Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, json, zip
        tools: composer:v2
        
    - name: 📦 Get Composer Cache Directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
      
    - name: 🗄️ Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-
        
    - name: 🔧 Install Composer dependencies (production)
      run: |
        # Remove any existing vendor directory to avoid git conflicts
        rm -rf vendor
        
        # Try install first, fallback to update if lock file conflicts
        if ! composer install --no-dev --optimize-autoloader --no-interaction --prefer-dist; then
          echo "Lock file conflicts detected, updating dependencies..."
          rm -rf vendor composer.lock
          composer update --no-dev --optimize-autoloader --no-interaction --prefer-dist
        fi
      
    - name: 📝 Create production environment file
      run: |
        cp production.env.example .env
        echo "APP_KEY=${{ secrets.APP_KEY }}" >> .env
        echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" >> .env
        echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
        echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
        
    - name: 🧹 Clear Laravel caches
      run: |
        php artisan config:clear
        php artisan route:clear
        php artisan view:clear
        php artisan cache:clear
        
    - name: ⚡ Optimize Laravel for production
      run: |
        php artisan config:cache
        php artisan route:cache
        php artisan view:cache
        
    - name: 📦 Create optimized deployment package
      run: |
        # Create temporary deployment directory
        mkdir -p temp-deploy
        
        # Copy essential files with specific exclusions
        echo "Copying application files..."
        rsync -av --progress \
              --exclude='.git' \
              --exclude='node_modules' \
              --exclude='tests' \
              --exclude='.github' \
              --exclude='storage/framework/cache/data' \
              --exclude='storage/logs/*.log' \
              --exclude='deploy_ftp.ps1' \
              --exclude='DEPLOYMENT_GUIDE.md' \
              --exclude='DEVELOPMENT_NOTES.md' \
              --exclude='production.env.example' \
              --exclude='create-deployment-package.ps1' \
              ./ temp-deploy/
              
        # Ensure required storage directories exist
        mkdir -p temp-deploy/storage/framework/cache/data
        mkdir -p temp-deploy/storage/framework/sessions
        mkdir -p temp-deploy/storage/framework/views
        mkdir -p temp-deploy/bootstrap/cache
        
        # Create deployment zip with compression
        echo "Creating deployment archive..."
        cd temp-deploy
        zip -r -9 ../binday-optimized.zip . \
            -x "*.git*" \
            -x "node_modules/*" \
            -x "tests/*" \
            -x ".github/*"
        cd ..
        
        # Show package info
        echo "📊 Deployment package created:"
        ls -lh binday-optimized.zip
        du -sh temp-deploy/
        
    - name: 🗂️ Create deployment script
      run: |
        cat > deploy-extract.php << 'EOF'
        <?php
        // Secure deployment extraction script
        error_reporting(E_ALL);
        ini_set('display_errors', 1);
        
        // Simple token verification
        $expected_token = '${{ secrets.DEPLOY_TOKEN }}';
        $provided_token = $_GET['token'] ?? '';
        
        if ($provided_token !== $expected_token) {
            http_response_code(403);
            die('Invalid token');
        }
        
        $zipFile = 'binday-optimized.zip';
        $extractTo = './';
        
        if (!file_exists($zipFile)) {
            http_response_code(404);
            die('Deployment package not found');
        }
        
        // Extract zip file
        $zip = new ZipArchive();
        $result = $zip->open($zipFile);
        
        if ($result === TRUE) {
            echo "Extracting deployment package...\n";
            $zip->extractTo($extractTo);
            $zip->close();
            
            // Clean up zip file
            unlink($zipFile);
            
            // Set permissions
            chmod('storage', 0755);
            chmod('bootstrap/cache', 0755);
            
            echo "✅ Deployment extracted successfully!\n";
            echo "🗑️ Deployment package cleaned up\n";
            
            // Remove this script for security
            unlink(__FILE__);
            echo "🔒 Deployment script removed\n";
        } else {
            http_response_code(500);
            echo "❌ Failed to extract deployment package: " . $result;
        }
        ?>
        EOF
        
    - name: 🗂️ Create root index file
      run: |
        echo '<?php' > root-index.php
        echo '// Front controller for shared hosting: route to subdirectory public index' >> root-index.php
        echo 'require __DIR__."/binday/public/index.php";' >> root-index.php
        
    - name: 📤 Upload deployment package and script
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ftp.fasthosts.co.uk
        username: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}
        port: 21
        protocol: ftps
        local-dir: ./
        server-dir: /htdocs/binday/
        include: |
          binday-optimized.zip
          deploy-extract.php
        exclude: |
          **/*
        timeout: 60000
        
    - name: 📋 Upload root index file
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ftp.fasthosts.co.uk
        username: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}
        port: 21
        protocol: ftps
        local-dir: ./
        server-dir: /htdocs/
        include: root-index.php
        exclude: |
          **/*
        timeout: 30000
        
    - name: 🚀 Extract deployment on server
      run: |
        echo "🔧 Triggering server-side extraction..."
        
        # Extract the deployment package on the server
        response=$(curl -f -s "https://thebinday.co.uk/binday/deploy-extract.php?token=${{ secrets.DEPLOY_TOKEN }}" || echo "FAILED")
        
        if [[ "$response" == "FAILED" ]]; then
          echo "❌ Server extraction failed. Manual extraction may be required."
          echo ""
          echo "Manual extraction steps:"
          echo "1. Access your Fasthost cPanel File Manager"
          echo "2. Navigate to /htdocs/binday/"
          echo "3. Extract binday-optimized.zip"
          echo "4. Delete binday-optimized.zip after extraction"
          echo "5. Set permissions: chmod 755 storage bootstrap/cache"
        else
          echo "✅ Server extraction completed:"
          echo "$response"
        fi
        
    - name: 🔍 Post-deployment verification
      run: |
        echo "🔍 Testing deployment..."
        sleep 10  # Wait for extraction to complete
        
        # Test if the main site loads
        if curl -f -s "https://thebinday.co.uk" > /dev/null; then
          echo "✅ Main site accessible"
        else
          echo "❌ Main site not accessible - may need time to propagate"
        fi
        
        echo ""
        echo "🔗 Verification URLs:"
        echo "1. Main site: https://thebinday.co.uk"
        echo "2. Map view: https://thebinday.co.uk/bins/map"
        echo "3. Collections: https://thebinday.co.uk/collections"
        echo "4. Areas: https://thebinday.co.uk/areas"
        echo "5. Admin seed: https://thebinday.co.uk/admin/seed"
        
    - name: ✅ Deployment complete
      run: |
        echo "🎉 Optimized deployment completed!"
        echo "🌐 Your application should be available at: https://thebinday.co.uk"
        echo ""
        echo "📊 Deployment method: Optimized zip upload + server extraction"
        echo "🚀 Benefits: Faster upload, reduced transfer time, atomic deployment"
        echo ""
        echo "🔍 If the site isn't working immediately:"
        echo "1. Wait 5-10 minutes for DNS propagation"
        echo "2. Check Fasthost cPanel for any file permission issues"
        echo "3. Verify the deployment was extracted properly"
