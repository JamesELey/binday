name: 🚀 Deploy to VPS via SSH

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      skip_vendor:
        description: 'Skip vendor installation (if already up to date)'
        required: false
        default: 'false'
        type: boolean

jobs:
  deploy:
    name: 🚀 Deploy to VPS
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐘 Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, json, zip
        tools: composer:v2
        
    - name: 📦 Get Composer Cache Directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
      
    - name: 🗄️ Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-
        
    - name: 🔧 Install Composer dependencies for optimization
      run: |
        # Clear any cached git repositories to avoid conflicts
        composer clear-cache
        rm -rf vendor
        
        # Install dependencies with fallback for git cache issues
        if ! composer install --no-dev --optimize-autoloader --no-interaction --prefer-dist; then
          echo "Composer install failed, trying with fresh cache..."
          composer clear-cache
          rm -rf vendor composer.lock
          composer install --no-dev --optimize-autoloader --no-interaction --prefer-dist
        fi
        
    - name: 📝 Create production environment file
      run: |
        cp production.env.example .env
        echo "APP_KEY=${{ secrets.APP_KEY }}" >> .env
        echo "DB_CONNECTION=${{ secrets.DB_CONNECTION }}" >> .env
        echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
        echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
        echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" >> .env
        echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
        echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
        
    - name: 🧹 Clear Laravel caches
      run: |
        php artisan config:clear || true
        php artisan route:clear || true
        php artisan view:clear || true
        php artisan cache:clear || true
        
    - name: ⚡ Optimize Laravel for production
      run: |
        php artisan config:cache
        php artisan route:cache
        php artisan view:cache
        
    - name: 📦 Create deployment package
      run: |
        # Create deployment directory
        mkdir -p deployment-package
        
        # Copy application files (excluding vendor - we'll install on server)
        rsync -av --exclude='.git' \
                  --exclude='vendor' \
                  --exclude='node_modules' \
                  --exclude='tests' \
                  --exclude='.github' \
                  --exclude='storage/framework/cache/data' \
                  --exclude='storage/logs/*.log' \
                  --exclude='deploy_ftp.ps1' \
                  --exclude='root_index.php' \
                  --exclude='DEPLOYMENT_GUIDE.md' \
                  --exclude='DEVELOPMENT_NOTES.md' \
                  --exclude='GITHUB_ACTIONS_DEPLOYMENT.md' \
                  --exclude='production.env.example' \
                  --exclude='create-deployment-package.ps1' \
                  --exclude='binday-deploy.zip' \
                  ./ deployment-package/
                  
        # Ensure storage directories exist with proper structure
        mkdir -p deployment-package/storage/framework/cache/data
        mkdir -p deployment-package/storage/framework/sessions
        mkdir -p deployment-package/storage/framework/views
        mkdir -p deployment-package/bootstrap/cache
        
        # Create deployment archive
        tar -czf deployment-package.tar.gz -C deployment-package .
        
        echo "📊 Deployment package size:"
        ls -lh deployment-package.tar.gz
        
    - name: 🔑 Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
        
    - name: 📤 Deploy to VPS
      run: |
        # Upload deployment package
        scp -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no \
          deployment-package.tar.gz \
          ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/tmp/
        
        # Deploy via SSH
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no \
          ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'ENDSSH'
          
          # Set deployment variables
          DEPLOY_PATH="${{ secrets.DEPLOY_PATH }}"
          BACKUP_PATH="${{ secrets.BACKUP_PATH }}"
          
          echo "🚀 Starting deployment to $DEPLOY_PATH"
          
          # Create backup of current deployment (if exists)
          if [ -d "$DEPLOY_PATH" ]; then
            echo "📦 Creating backup..."
            mkdir -p "$BACKUP_PATH"
            BACKUP_NAME="backup-$(date +%Y%m%d-%H%M%S)"
            cp -r "$DEPLOY_PATH" "$BACKUP_PATH/$BACKUP_NAME"
            echo "✅ Backup created: $BACKUP_PATH/$BACKUP_NAME"
            
            # Keep only last 5 backups
            cd "$BACKUP_PATH"
            ls -1t | tail -n +6 | xargs -r rm -rf
          fi
          
          # Create deployment directory
          mkdir -p "$DEPLOY_PATH"
          
          # Extract new deployment
          echo "📦 Extracting deployment package..."
          cd "$DEPLOY_PATH"
          tar -xzf /tmp/deployment-package.tar.gz
          
          # Set proper permissions
          echo "🔒 Setting file permissions..."
          find "$DEPLOY_PATH" -type f -exec chmod 644 {} \;
          find "$DEPLOY_PATH" -type d -exec chmod 755 {} \;
          chmod -R 775 "$DEPLOY_PATH/storage"
          chmod -R 775 "$DEPLOY_PATH/bootstrap/cache"
          
          # Make artisan executable
          chmod +x "$DEPLOY_PATH/artisan"
          
          # Setup environment file if it doesn't exist
          echo "🔧 Checking environment configuration..."
          if [ ! -f "$DEPLOY_PATH/.env" ]; then
            echo "📝 Creating .env from production template..."
            cp "$DEPLOY_PATH/production.env.example" "$DEPLOY_PATH/.env"
            echo "⚠️  .env file created from template - you need to configure database settings!"
            echo "   Edit $DEPLOY_PATH/.env and set your database credentials"
          else
            echo "✅ .env file already exists"
          fi
          
          echo "✅ Files deployed successfully"
          
        ENDSSH
        
    - name: 🔧 Install dependencies and optimize on VPS
      if: ${{ github.event.inputs.skip_vendor != 'true' }}
      run: |
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no \
          ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'ENDSSH'
          
          DEPLOY_PATH="${{ secrets.DEPLOY_PATH }}"
          
          echo "📦 Installing Composer dependencies..."
          cd "$DEPLOY_PATH"
          
          # Check PHP version 
          PHP_VERSION=$(php -r "echo PHP_VERSION;")
          echo "🐘 Server PHP Version: $PHP_VERSION"
          
          # For reliability, always start fresh to avoid git cache issues
          echo "🧹 Clearing composer cache and starting fresh..."
          composer clear-cache
          rm -rf vendor
          
          # Install dependencies (will use composer.lock if compatible, otherwise resolve fresh)
          if ! composer install --no-dev --optimize-autoloader --no-interaction --prefer-dist; then
            echo "⚠️ Lock file incompatible, resolving fresh dependencies..."
            rm -f composer.lock
            composer install --no-dev --optimize-autoloader --no-interaction --prefer-dist
          fi
          
          echo "✅ Dependencies installed successfully"
          
        ENDSSH
        
    - name: ⚡ Post-deployment optimization
      run: |
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no \
          ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'ENDSSH'
          
          DEPLOY_PATH="${{ secrets.DEPLOY_PATH }}"
          
          echo "⚡ Running post-deployment optimization..."
          cd "$DEPLOY_PATH"
          
          # Clear caches
          php artisan config:clear
          php artisan route:clear
          php artisan view:clear
          php artisan cache:clear
          
          # Optimize for production
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache
          
          # Run migrations (if needed)
          php artisan migrate --force
          
          # Seed database with demo users (if needed)
          echo "🌱 Checking if demo users exist..."
          USER_COUNT=$(php artisan tinker --execute="echo App\\User::count();")
          if [ "$USER_COUNT" -eq "0" ]; then
            echo "🌱 No users found, seeding database with demo data..."
            php artisan db:seed --class=UserSeeder
            php artisan db:seed --class=AreaSeeder
            echo "✅ Demo users and areas seeded"
          else
            echo "ℹ️ Users already exist ($USER_COUNT users), skipping seed"
          fi
          
          # Set final permissions
          chmod -R 775 storage bootstrap/cache
          
          echo "✅ Post-deployment optimization complete"
          
        ENDSSH
        
    - name: 🧹 Cleanup
      run: |
        # Remove SSH key
        rm -f ~/.ssh/deploy_key
        
        # Clean up deployment package on VPS
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no \
          ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
          "rm -f /tmp/deployment-package.tar.gz" || true
          
    - name: 🧪 Health Check - Deployment Verification
      run: |
        echo "🧪 Running automated health checks..."
        
        # Set site URL - try with and without www
        SITE_URL="http://${{ secrets.VPS_HOST }}"
        
        # Make the health check script executable
        chmod +x tests/quick-health-check.sh
        
        # Run health checks
        echo "🔍 Testing deployment health..."
        if ./tests/quick-health-check.sh "$SITE_URL"; then
          echo ""
          echo "🎉 HEALTH CHECK PASSED! Deployment is working correctly! 🚀"
          echo ""
        else
          echo ""
          echo "⚠️ Health check found issues. Manual verification recommended."
          echo ""
          echo "📋 Manual verification checklist:"
          echo "1. Check web server is running (nginx/apache)"
          echo "2. Verify PHP-FPM is active"
          echo "3. Check site configuration"
          echo "4. Review error logs"
          echo ""
        fi
        
        echo "🌐 Application URL: $SITE_URL"
        echo "📁 Deployment path: ${{ secrets.DEPLOY_PATH }}"
        echo "🔄 Backups stored in: ${{ secrets.BACKUP_PATH }}"
        
    - name: 🚀 Advanced Health Check (Optional)
      continue-on-error: true
      run: |
        echo "🧪 Running comprehensive health check with Node.js..."
        
        # Install Node.js for comprehensive testing
        if command -v node >/dev/null 2>&1; then
          SITE_URL="http://${{ secrets.VPS_HOST }}" node tests/deployment-health-check.js
        else
          echo "ℹ️ Node.js not available, skipping advanced tests"
          echo "✅ Basic health check completed above"
        fi
        
    - name: ✅ Deployment Complete
      run: |
        echo "🎉 SSH deployment completed successfully!"
        echo ""
        echo "🚀 Your application has been deployed to the VPS"
        echo "📦 Vendor dependencies have been installed on the server"
        echo "⚡ Laravel has been optimized for production"
        echo "💾 Backup created of previous deployment"
        echo "🧪 Health checks completed"
        echo ""
        echo "🔗 Quick Links:"
        echo "   🌐 Website: http://${{ secrets.VPS_HOST }}"
        echo "   🗺️ Bin Map: http://${{ secrets.VPS_HOST }}/bins/map"
        echo "   📅 Collections: http://${{ secrets.VPS_HOST }}/collections"
        echo "   ⚙️ Admin: http://${{ secrets.VPS_HOST }}/admin/seed"
